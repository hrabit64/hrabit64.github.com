<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator><link href="https://hrabit64.github.io//feed.xml" rel="self" type="application/atom+xml" /><link href="https://hrabit64.github.io//" rel="alternate" type="text/html" /><updated>2021-05-15T05:13:28+09:00</updated><id>https://hrabit64.github.io//feed.xml</id><title type="html">hrabit64의 블로그</title><subtitle>ML을 주로 공부하는 hrabit64의 블로그 입니다.</subtitle><author><name>hrabit64</name><email>hzser123@hanyang.ac.kr</email></author><entry><title type="html">유니티 ML_Agents 공부해보기 - 기본구조(2) Brain</title><link href="https://hrabit64.github.io//ml_agents/mlagent2/" rel="alternate" type="text/html" title="유니티 ML_Agents 공부해보기 - 기본구조(2) Brain" /><published>2021-05-09T00:00:00+09:00</published><updated>2021-05-09T00:00:00+09:00</updated><id>https://hrabit64.github.io//ml_agents/mlagent2</id><content type="html" xml:base="https://hrabit64.github.io//ml_agents/mlagent2/">&lt;h2 id=&quot;0-개요&quot;&gt;0. 개요&lt;/h2&gt;

&lt;p&gt;지난번에는 주인공 &lt;strong&gt;에이전트&lt;/strong&gt;에 대해서 알아봤다면 이번에는 &lt;strong&gt;브레인&lt;/strong&gt;에 대해서 알아볼 것이다.&lt;/p&gt;

&lt;p&gt;브레인은 유니티 블로그에서는 다음과 같이 설명하고 있다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;“각 브레인은 특정 상태와 행동 공간을 정의하고, 연결된 에이전트가 어떤 행동을 취할지 결정합니다.”&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;브레인은 현재 릴리즈를 기점으로 총 4가지 모드를 지원한다.&lt;/p&gt;

&lt;p&gt;마찬가지로 유니티 블로그에서는 다음과 같이 설명하고 있다.&lt;/p&gt;

&lt;p&gt;● &lt;strong&gt;External&lt;/strong&gt; : ML 라이브러리를 사용하여 파이썬 api를 통해 개방형 소켓으로 통신하여 행동을 결정함&lt;/p&gt;

&lt;p&gt;● &lt;strong&gt;Internal&lt;/strong&gt; :  Tensorflowsharp 를 통해 프로젝트에 탑재된 훈련된 모델을 활용하여 행동을 결정합니다.(현재 기준으로 실험적인 모드로 설명되어있다.)&lt;/p&gt;

&lt;p&gt;● &lt;strong&gt;Player&lt;/strong&gt; : 플레이어의 입력을 통해 행동을 결정힘&lt;/p&gt;

&lt;p&gt;● &lt;strong&gt;Heuristic&lt;/strong&gt; : 직접 코딩한 동작을 기반으로 행동을 결정함&lt;/p&gt;

&lt;p&gt;다만 책에는 &lt;strong&gt;Heuristic&lt;/strong&gt;,&lt;strong&gt;Player&lt;/strong&gt;가 생성가능하고, 추가적으로 &lt;strong&gt;Learning Brain&lt;/strong&gt;이 생성가능하다고 나와있는데 이 러닝브레인은 어떤 내용인지 뒤에서 알아보겠다.&lt;/p&gt;

&lt;p&gt;이 Brain 들은 공통적으로 설정가능한 파라미터들이 있다. 하나하나 살펴보도록 하겠다.&lt;/p&gt;

&lt;h2 id=&quot;1-copy-brain-parameter-from&quot;&gt;1. Copy Brain Parameter from&lt;/h2&gt;

&lt;p&gt;이 파라미터는 간단하게 말해 &lt;strong&gt;복사&lt;/strong&gt; 기능이다. 다른 브레인의 파라미터들을 복사해오고 싶을 때, 이 기능을 사용하면 간단하게 다른 브레인의 파라미터들을 복사해올 수 있다. 후에 본격적으로 제작에 들어가면 강화학습은 에이전트 한개만 훈련시키는 것이 아닌 여러 가지의 에이전트들을 훈련시키는 경우도 있는데, 각각의 브레인들을 힘들게 복붙하지 않아도 이 기능을 이용하면 간단하게 여러개의 브레인들을 생성할 수 있다.&lt;/p&gt;

&lt;h2 id=&quot;2-vector-observation&quot;&gt;2. Vector Observation&lt;/h2&gt;

&lt;p&gt;이 파라미터는 &lt;strong&gt;Space Size&lt;/strong&gt;와 &lt;strong&gt;Stacked Vectors&lt;/strong&gt;을 설정할 수 있는 파라미터이다. 각가 어떤 기능들을 하는지 살펴보도록 하겠다.&lt;/p&gt;

&lt;h3 id=&quot;2-1-space-size&quot;&gt;2-1. Space Size&lt;/h3&gt;

&lt;p&gt;Space size는 지난번 공부했던 CollectObservation 함수에서 AddVectorObs 함수를 이용해 입력해둔 수치적 관측의 수와 동일하게 설정해줘야하는 인자이다.&lt;/p&gt;

&lt;p&gt;만약 5개의 수치적 관측을 주었다면, Space Size의 값은 5가 되어야 할것이다.&lt;/p&gt;

&lt;h3 id=&quot;2-2-stacked-vectors&quot;&gt;2-2. Stacked Vectors&lt;/h3&gt;

&lt;p&gt;Stacked Vectors는 앞에서 space size를 통해 설정한 수치적 관측의 수를 몇 개를 이어 붙일지 결정하는 값이다. 예를 들어 Space Size가 5이고 Stacked Vectors 인자로 3을 주었다면 크기가 최종적으로 15개인 벡터를 수치적 관측으로 사용하게 되는 것이다.  이렇게 수치적 관측을 누적해야하는 경우가 있는데, 대표적으로 공의 움직임을 파악할 때, 누적된 관측이 포함된다면 해당 공의 속도를 알아 낼 수 있을 것이다. Stacked Vectors 를 잘 활용한다면, 여러 스텝의 정보를 한꺼번에 전달하여 시간과 관련된 정보를 제공할 수 있다.&lt;/p&gt;

&lt;h2 id=&quot;3-visual-observation&quot;&gt;3. Visual Observation&lt;/h2&gt;

&lt;p&gt;관측에는 2가지 관측이 있다. 앞서 계속 알아봤던 수치적 관측과 시각적 관측이 존재하는데, 이 파라미터는 수치적 관측을 브레인에 추가하고, 크기와 색상을 결정할 수 있다.&lt;/p&gt;

&lt;p&gt;CNN을 공부해봤다면 알 수 있겠지만, 이미지 데이터는 RGB로 총 3개의 층으로 구성된다. 다시말해 64*64 컬러 이미지는 (64,64,3)이 되겠지만, GrayScale 이미지는 컬러 채널이 1개이므로 (64,64,1)가 될것이다.&lt;/p&gt;

&lt;h2 id=&quot;4-vector-action&quot;&gt;4. Vector Action&lt;/h2&gt;

&lt;p&gt;백터 액션은 파라미터 이름에서부터 느껴지겠지만 액션에 관한 파라미터이다. 액션은 앞에서 살펴봤다 싶이 이산적인 행동이냐, 연속적인 행동이냐 에 따라 설정법이 달라진다.&lt;/p&gt;

&lt;p&gt;우선 공통적으로 Space Type을 이용해 어떤 종류의 액션인지 설정해줄 수 있다. 또한 Action Descriptions를 이용하면 각각의 브랜치,Space가 어떤 역할을 하는지 주석을 달아 줄 수도 있다.&lt;/p&gt;

&lt;p&gt;우선 이산적인 행동에서는 브랜치의 개수를 지정해주고, 각각의 브랜치의 크기를 지정해주면 된다.&lt;/p&gt;

&lt;p&gt;연속적인 행동에서는 Space의 크기만 지정해주면 된다.&lt;/p&gt;

&lt;h2 id=&quot;5-플레이어-브레인&quot;&gt;5. 플레이어 브레인&lt;/h2&gt;

&lt;p&gt;앞서 살펴본 브레인의 종류 중에 플레이어 브레인이 있었다. 이 브레인은 각 액션에 대해 키보드 키를 할당해주면, 키를 누를 때 에이전트가 할당된 액션을 하는 방식이다. 이제 액션이 나오면 반사적으로 나오겠지만 역시 이산적이냐 연속적이냐에 따라서 작성 방식이 다르다.&lt;/p&gt;

&lt;h3 id=&quot;5-1-이산적인-행동&quot;&gt;5-1. 이산적인 행동&lt;/h3&gt;

&lt;p&gt;이산적인 행동에서는 &lt;strong&gt;Discrete Player Actions&lt;/strong&gt;라는 파라미터가 활성화 된다. 앞서 설명한 백터액션 파라미터에서 브랜치를 선언해주었을 것이다.&lt;/p&gt;

&lt;p&gt;이제 이 파라미터를 이용하면 각각의 브랜치의 값에 키를 지정해줄 수 있다. Key에는 키보드 키를 할당해주고, Branch idx에는 어떤 브랜치 인지 값을 입력해주고, Value에는 그 브랜치의 어떤 값인지 입력해주면 된다.&lt;/p&gt;

&lt;p&gt;예를 들어 브랜치 0,1이가 있고, 브랜치 0에는 0,1이라는 값이 있으며 0이라는 값에 스페이스바를 할당했다고 가정하면, 해당 스페이스 바를 누르면 앞서 에이전트에서 소개했던 AgentAction 함수의  vectorAction[0]이 0이라는 값을 반환 할 것이다. 만약 수치를 다르게 입력해주고 싶다면 해당 vectorAction[0]에 반환되는 값을 조건문을 이용해 처리하면 될 것이다.&lt;/p&gt;

&lt;h3 id=&quot;5-2-연속적인-행동&quot;&gt;5-2. 연속적인 행동&lt;/h3&gt;

&lt;p&gt;연속적인 행동에서는 각각의 Space에 키를 할당해주면 된다. 할당된 key를 누르면 마찬가지로 vectorAction[idx] 의 값이 해당 Value 만큼 반환 될 것이다.&lt;/p&gt;

&lt;p&gt;추가로 유니티의 Axis Continuous Player Action을 이용하면 더욱 간단하게 4축을 구현할 수도 있다.&lt;/p&gt;

&lt;h2 id=&quot;6-휴리스틱-브레인&quot;&gt;6. 휴리스틱 브레인&lt;/h2&gt;

&lt;p&gt;휴리스틱 브레인은 앞서 설명했듯이 사람이 직접 코드에서 작성한 방식대로 에이전트를 제어하는 브레인이다.&lt;/p&gt;

&lt;p&gt;실제 3D볼 예제에 들어있는 코드이다.&lt;/p&gt;

&lt;div class=&quot;language-c# highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;System.Collections.Generic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;UnityEngine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;MLAgents&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Ball3DDecision&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Decision&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rotationSpeed&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Decide&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vectorObs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Texture2D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;visualObs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reward&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;done&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;memory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;brainParameters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vectorActionSpaceType&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SpaceType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;continuous&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;act&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;();&lt;/span&gt;

            &lt;span class=&quot;c1&quot;&gt;// state[5] is the velocity of the ball in the x orientation. &lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// We use this number to control the Platform's z axis rotation speed, &lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// so that the Platform is tilted in the x orientation correspondingly. &lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;act&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vectorObs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rotationSpeed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

            &lt;span class=&quot;c1&quot;&gt;// state[7] is the velocity of the ball in the z orientation. &lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// We use this number to control the Platform's x axis rotation speed,  &lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// so that the Platform is tilted in the z orientation correspondingly. &lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;act&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vectorObs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rotationSpeed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;act&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ToArray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// If the vector action space type is discrete, then we don't do anything.     &lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1f&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;MakeMemory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vectorObs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Texture2D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;visualObs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reward&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;done&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;memory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;();&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;


&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;우선 대표적으로 보이는 함수로는 &lt;strong&gt;Decide()&lt;/strong&gt;, &lt;strong&gt;MakeMemory()&lt;/strong&gt;가 존재한다.&lt;/p&gt;

&lt;h3 id=&quot;6-1-decide&quot;&gt;6-1. Decide()&lt;/h3&gt;

&lt;p&gt;이 함수는 에이전트의 현재 상태, 보상 등을 입력받아 브레인에서 설정한 행동의 종류에 따라 알맞은 형태의 행동을 반환한다. 역시나 액션의 종류에 따라 반환하는 값이 다른데, 이산적인 행동에서는 브랜치 수만큼 배열을 반환하고, 각 브랜치는 설정된 수 만큼의 정수값으로 구성된 배열이다. 연속적인 행동에서는 설정된 행동의 갯수에 맞추어 실숫값으로 이뤄진 배열을 반환한다.&lt;/p&gt;

&lt;p&gt;앞의 코드를 통해 살펴보자&lt;/p&gt;

&lt;div class=&quot;language-c# highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Decide&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vectorObs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Texture2D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;visualObs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reward&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;done&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;memory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;vectorObs(수치적 관측),visualObs(시각적 관측),reward(보상),done(게임 종료 여부),memory(이전 기억이다. 뒤에서 후술.)&lt;/strong&gt;을 입력받는 모습을 볼 수 있다.&lt;/p&gt;

&lt;div class=&quot;language-c# highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;   &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;brainParameters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vectorActionSpaceType&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SpaceType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;continuous&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;act&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;();&lt;/span&gt;

            &lt;span class=&quot;c1&quot;&gt;// state[5] is the velocity of the ball in the x orientation. &lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// We use this number to control the Platform's z axis rotation speed, &lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// so that the Platform is tilted in the x orientation correspondingly. &lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;act&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vectorObs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rotationSpeed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

            &lt;span class=&quot;c1&quot;&gt;// state[7] is the velocity of the ball in the z orientation. &lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// We use this number to control the Platform's x axis rotation speed,  &lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// so that the Platform is tilted in the z orientation correspondingly. &lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;act&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vectorObs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rotationSpeed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;act&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ToArray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;앞부분의 if문을 보면 이 액션의 종류는 continuous 인것을 알 수 있다.  이후 act.Add()를 통해 실숫값들을 act리스트에 넣고 이것을 반환하는 모습이다. 즉 실숫값 리스트에 어떤 행동을 해야할지 리스트를 만들고 전달한다고 유추해볼 수 있다.&lt;/p&gt;

&lt;h3 id=&quot;6-2-makememory&quot;&gt;6-2. MakeMemory()&lt;/h3&gt;

&lt;p&gt;이 함수는 현재 스탭의 정보(에이전트의 상태나 보상 등)을 메모리라는 이름의 (영어 단어 뜻 그대로 기억이다. 그 RAM이 아니라.)리스트에 담아 다음 스탭의 Decide() 함수에 전달한다. 이렇게 되면 Decide()에서는 이전 정보와 현재 정보를 종합하여 행동을 결정할 수 있게 된다.&lt;/p&gt;

&lt;p&gt;이번에도 코드를 살펴보자.&lt;/p&gt;

&lt;div class=&quot;language-c# highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;MakeMemory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vectorObs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Texture2D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;visualObs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reward&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;done&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;memory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;vectorObs(수치적 관측),visualObs(시각적 관측),reward(보상),done(게임 종료 여부),memory(기억)을 전달받는다. 아까 Decide()함수가 받는 인자와 동일한 값들이 보인다. 이러한 정보들을 종합하여 메모리 리스트로 반환하는 것이다. 다만 그냥 빈 리스트를 반환하는 모습인데, 어떤 이유인지는 모르겠지만 이 예제가 사용되는 강화학습 환경에서는 이전 정보가 요구되지 않는 모습이다. 이렇게 이전 정보가 요구되지 않을 때에는, 그냥 빈 리스트를 반환하면 된다.&lt;/p&gt;

&lt;h2 id=&quot;7-러닝-브레인&quot;&gt;7. 러닝 브레인&lt;/h2&gt;

&lt;p&gt;러닝 브레인은 학습을 시키거나 테스트를 하는 곳에서도 사용할 수 있는 다재다능한 친구이다. 아카데미라는 공부하지 않은 요소까지 요구하므로 패스하도록 하겠다.&lt;/p&gt;</content><author><name>hrabit64</name><email>hzser123@hanyang.ac.kr</email></author><category term="ML_Agents" /><category term="ML_Agents" /><category term="Unity" /><summary type="html">0. 개요</summary></entry><entry><title type="html">유니티 ML_Agents 공부해보기 - 기본구조(1) Agent</title><link href="https://hrabit64.github.io//ml_agents/mlagent1/" rel="alternate" type="text/html" title="유니티 ML_Agents 공부해보기 - 기본구조(1) Agent" /><published>2021-05-09T00:00:00+09:00</published><updated>2021-05-09T00:00:00+09:00</updated><id>https://hrabit64.github.io//ml_agents/mlagent1</id><content type="html" xml:base="https://hrabit64.github.io//ml_agents/mlagent1/">&lt;h2 id=&quot;0-개요&quot;&gt;0. 개요&lt;/h2&gt;

&lt;p&gt;이 블로그의 모든 글은 “텐서플로와 유니티 ML-Agents로 배우는 강화학습” 도서를 공부하며 정리한 내용들이다. 대부분의 내용들과 코드들은 이 책을 정리한 것이다.  또한 이런 좋은 책을 내주신 저자분들께 감사드린다.&lt;/p&gt;

&lt;p&gt;도서 링크: https://wikibook.co.kr/tensorflow-mlagents/&lt;/p&gt;

&lt;p&gt;기본적으로 강화학습 알고리즘을 이용해 개발을 하기 위해서는 알고리즘을 구현하는 것도 중요하지만, 알고리즘을 학습할 수 있는 환경을 구성하는 것도 중요하다. 하지만 실질적으로 알고리즘을 구현하고, 학습하는 환경까지 구현하기에는 너무 많은 힘이 든다.&lt;/p&gt;

&lt;p&gt;이러한 문제점을 해결하기 위해 2017년 9월 ML-Agents가 등장하였다. 이 ML-Agents를 사용하면 기존보다 더 쉽게 강화학습을 구현할 수 있으며, 또한 기본적으로 내장 알고리즘을 지원하기 때문에 쉽게 강화학습에 입문해볼 수 도 있다.&lt;/p&gt;

&lt;p&gt;이 ML-Agents에서 내장 알고리즘을 사용하는 방법은 다음과 같다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;빌드된 유니티 환경 준비하기&lt;/li&gt;
  &lt;li&gt;빌드된 환경의 에이전트를 기본적으로 제공하는 알고리즘을 이용해 학습&lt;/li&gt;
  &lt;li&gt;학습이 종료되면 학습된 딥러닝 모델(확장자명 .nn) 생성&lt;/li&gt;
  &lt;li&gt;생성된 모델을 에이전트에 적용하여 사용&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;기본 내장 알고리즘을 사용하지 않고 파이썬으로 구성된 에이전트를 활용할 수도 있다.&lt;/p&gt;

&lt;p&gt;ML-Agents을 사용하면 빌드된 환경에서 파이썬으로 &lt;strong&gt;상태,보상&lt;/strong&gt;에 대한 정보를 제공하면, 파이썬은 그 에 대한 &lt;strong&gt;액션&lt;/strong&gt;에 대한 정보를 주고 받으며 학습이 이루어진다.&lt;/p&gt;

&lt;h1&gt;&lt;img src=&quot;/image/다운로드.png&quot; alt=&quot;유니티 mlagents구조&quot; /&gt;&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;\assets\image\다운로드.png&quot; alt=&quot;다운로드&quot; /&gt;&lt;/p&gt;

&lt;p&gt;출처 : https://blogs.unity3d.com/kr/2017/09/19/introducing-unity-machine-learning-agents/&lt;/p&gt;

&lt;p&gt;위 이미지는 ML-Agents의 구성을 나타낸 것이다. 이 그림을 살펴보면 ML-Agents는 다음과 같이 구성되어 있다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;●에이전트(Agent)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;●브레인(brain)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;●아카데미(Academy)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;오늘 이 글에서는 에이전트에 대해서 공부할 것 이다.&lt;/p&gt;

&lt;h2 id=&quot;1에이전트agent의-기본-구조&quot;&gt;1.에이전트(Agent)의 기본 구조&lt;/h2&gt;

&lt;p&gt;에이전트는 환경 내에서 행동을 취하는 요소이다. 환경과 관측을 담은 상태를 기반으로 의사결정을 하는 요소이다.&lt;/p&gt;

&lt;p&gt;유니티 블로그에서는 다음과 같이 설명하고 있다.&lt;/p&gt;

&lt;p&gt;“&lt;em&gt;각각의 에이전트는 고유의 상태 및 관측 값을 가지고 있고, 환경 내에서 고유의 행동을 하며 환경 내부에서 일어나는 이벤트에 따라 고유의 보상을 받습니다. 각 에이전트의 행동은 해당 에이전트가 연결되어 있는 브레인에 의해 결정됩니다.&lt;/em&gt;”&lt;/p&gt;

&lt;p&gt;이 ML-Agents에서는 기본적으로 다음과 같이 4가지 함수를 가지고 있다.&lt;/p&gt;

&lt;div class=&quot;language-c# highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TemplateAgent&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Agent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;CollectObservations&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;overrid&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;AgentAction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vectorAction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;textAction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;overrid&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;AgentReset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;overrid&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;AgentOnDone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;2-collectobservations&quot;&gt;2. CollectObservations()&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;CollectObservations&lt;/strong&gt; 함수는 에이전트의 수치적 관측에 값을 추가하는 함수이다. &lt;strong&gt;AddVectorObs()&lt;/strong&gt; 함수를 사용하여 수치적 관측에 값을 추가할 수 있다.&lt;/p&gt;

&lt;div class=&quot;language-c# highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;CollectObservations&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;AddVectorObs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;AddVectorObs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;       
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;3-agentactionfloat-vectoraction-string-textaction&quot;&gt;3. AgentAction(float[] vectorAction, string textAction)&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;AgentAction()&lt;/strong&gt; 함수는 에이전트의 행동을 입력받고(float[] vectorAction), 어떻게 명령을 수행할지 결정(string textAction)하는 함수이다.&lt;/p&gt;

&lt;p&gt;강화학습의 기본 개념을 공부했다면 에이전트의 &lt;strong&gt;Action&lt;/strong&gt;에는 &lt;strong&gt;이산적인 행동&lt;/strong&gt;과 &lt;strong&gt;연속적인 행동&lt;/strong&gt; 으로 2가지 방식이 존재한다는 것을 알고 있을 것 이다.&lt;/p&gt;

&lt;p&gt;● &lt;strong&gt;이산적인 행동&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;행동의 선택지가 주어지며, 그중 하나를 선택하는 방식&lt;/p&gt;

&lt;p&gt;● &lt;strong&gt;연속적인 행동&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;선택지마다 특정 값을 수치로 입력하여 행동하는 방식&lt;/p&gt;

&lt;p&gt;따라서 이산적인 행동인지 연속적인 행동인지에 따라 작성법이 다르다.&lt;/p&gt;

&lt;h3 id=&quot;3-1-이산적인-행동discrete-action&quot;&gt;3-1 이산적인 행동(Discrete Action)&lt;/h3&gt;

&lt;p&gt;유니티의 ML-Agents에는 &lt;strong&gt;브랜치(Branch)&lt;/strong&gt;라는 개념이 존재한다. 브랜치는 행동의 종류를 나누는 기준이며 이산적인 행동을 나타내야하기 때문에 &lt;strong&gt;정수값&lt;/strong&gt;으로 구성된다.&lt;/p&gt;

&lt;p&gt;예를 들어 에이전트가 x,y,z축으로 움직여야 한다면 각각의 축을 Branch 0, Branch 1,Branch 2 로 설정할 수 있을 것이다. 또한 각각의 축에 가하는 힘을 0,1,2으로 표현한다면 다음과 같이 코드를 구현할 수 있다.&lt;/p&gt;

&lt;div class=&quot;language-c# highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;overrid&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;AgentAction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vectorAction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;textAction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//입력받은 vectorAction은 모든 브랜치에 해당하는 액션의 값들이 float형으로 저장되어 있음.&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//브랜치는 정수로 구성되기에 Mathf.FloorToInt 함수를 통해 정수로 변환해줌&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;movement_X&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Mathf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;FloorToInt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vectorAction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;movement_Y&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Mathf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;FloorToInt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vectorAction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;movement_Z&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Mathf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;FloorToInt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vectorAction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;//x축&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;movement_X&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;directionX&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;movement_X&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
     	&lt;span class=&quot;n&quot;&gt;directionX&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;    
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;movement_X&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;directionX&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//y축&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;movement_Y&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;directionY&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;movement_Y&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
     	&lt;span class=&quot;n&quot;&gt;directionY&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;    
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;movement_Y&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;directionY&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//z축&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;movement_Z&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;directionZ&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;movement_Z&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
     	&lt;span class=&quot;n&quot;&gt;directionZ&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;    
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;movement_Z&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;directionZ&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;//위 수식에서 x,y,z축에 정해진 힘을 주는 함수 Vector3는 x,y,z축 방향에 대한 벡터의 크기를 나타냄&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;gameObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetComponent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Rigidbody&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;().&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;AddForce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Vector3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;directionX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;directionY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;directionZ&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;3-2-연속적인-행동continuous-action&quot;&gt;3-2 연속적인 행동(Continuous Action)&lt;/h3&gt;

&lt;p&gt;이산적인 행동에서 브랜치를 사용했지만, 연속적인 행동에서는 브랜치의 개념이 적용되지 않는다.  대신 이름 처럼 &lt;strong&gt;연속적인 값&lt;/strong&gt;을 가질 수 있다. 만약 -1~1까지의 값을 가진다고 하면 -1~1까지의 모든 실수값이 될 수 있는것이다.&lt;/p&gt;

&lt;p&gt;따라서 위 코드를 연속적인 행동을 하는 코드로 수정한다면 다음과 같을 것이다.&lt;/p&gt;

&lt;div class=&quot;language-c# highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;overrid&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;AgentAction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vectorAction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;textAction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;//Mathf.Clamp(Value,min,max) 입력 받은 값이 최소/최대 크기를 넘지 않도록 해주는 함수이다.&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;force_X&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Mathf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Clamp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vectorAction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],-&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1.0f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1.0f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;force_y&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Mathf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Clamp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vectorAction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],-&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1.0f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1.0f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;force_z&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Mathf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Clamp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vectorAction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],-&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1.0f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1.0f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;gameObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetComponent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Rigidbody&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;().&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;AddForce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Vector3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;force_X&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;force_y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;force_z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;3-3-addreward&quot;&gt;3-3 AddReward()&lt;/h3&gt;

&lt;p&gt;강화학습에서 에이전트가 행동을 취했다면 그에 맞는 보상을 주어야 할 것이다. ML-Agents에서는 이를 &lt;strong&gt;AddReward()&lt;/strong&gt; 함수를 사용하여 보상을 줄 수 있다.&lt;/p&gt;

&lt;div class=&quot;language-c# highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;//만약 x축의 위치가 1이 된다면 1.0 만큼의 보상을 줄 것이다.&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;transform&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1.0f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;AddReward&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1.0f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//Done() 함수를 사용하여 게임 한판을 끝내준다.&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;Done&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//만약 x축의 위치가 -1이 된다면 -1.0 만큼의 보상을 줄 것이다.&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;transform&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1.0f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;AddReward&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(-&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1.0f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;Done&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;강화학습에서 에이전트는 보상을 최대화 하도록 학습된다. 따라서 위 코드와 같이 구현한다면 x축의 위치가 1.0이 되도록 학습될 것이다.&lt;/p&gt;

&lt;h2 id=&quot;4-agentreset&quot;&gt;4. AgentReset()&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;AgentReset()&lt;/strong&gt; 함수는 &lt;strong&gt;AddRweard()&lt;/strong&gt; 함수를 설명할 때 나왔던 &lt;strong&gt;Done()&lt;/strong&gt;을 실행하여 게임 한판이 종료되었을 때 호출된다. 에이전트의 상태를 어떻게 초기화할지 설정하는 부분이다.&lt;/p&gt;

&lt;p&gt;만약 게임 한판이 종료 되었을 때, 위치를 (0,0,0)으로 이동시키고 싶다면 다음과 같이 구현하면 된다.&lt;/p&gt;

&lt;div class=&quot;language-c# highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;overrid&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;AgentReset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;transform&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;position&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Vector3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;  
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;5-agentondone&quot;&gt;5. AgentOnDone()&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;AgentOnDone()&lt;/strong&gt; 함수는 에이전트를 더이상 사용하지 않을 때, 나중에 후술할 Brain에 알리는 함수이다.&lt;/p&gt;

&lt;div class=&quot;language-c# highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;overrid&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;AgentOnDone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;nf&quot;&gt;Destroy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gameObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;6-정리&quot;&gt;6. 정리&lt;/h2&gt;

&lt;p&gt;오늘 쓴 내용을 내 나름대로 정리하면 다음과 같다.&lt;/p&gt;

&lt;p&gt;ML-Agents에서 에이전트는 &lt;strong&gt;주인공&lt;/strong&gt; 역할이다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;CollectObservations()&lt;/strong&gt; 함수를 이용해 에이전트에게 수치적 관측을 전달하여 에이전트가 판단할 근거를 제공하고,&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;AgentAction(float[] vectorAction, string textAction)&lt;/strong&gt; 함수를 이용해 에이전트에게 어떻게 행동할지 &lt;strong&gt;Action&lt;/strong&gt;을 지정해준다.&lt;/p&gt;

&lt;p&gt;이때 &lt;strong&gt;AddReward()&lt;/strong&gt; 변수로 보상을 주고, 종료 조건에 도달하면 &lt;strong&gt;Done()&lt;/strong&gt; 함수를 이용해 게임을 종료한다.&lt;/p&gt;

&lt;p&gt;이때, &lt;strong&gt;Done()&lt;/strong&gt; 함수로 인해 게임이 종료 됬다면, &lt;strong&gt;AgentReset()&lt;/strong&gt; 변수에 따라 에이전트를 초기화한다.&lt;/p&gt;

&lt;p&gt;만약 에이전트가 필요 없어진다면 &lt;strong&gt;AgentOnDone()&lt;/strong&gt; 을 통해 &lt;strong&gt;brain&lt;/strong&gt;에 알리고 삭제한다.&lt;/p&gt;</content><author><name>hrabit64</name><email>hzser123@hanyang.ac.kr</email></author><category term="ML_Agents" /><category term="ML_Agents" /><category term="Unity" /><summary type="html">0. 개요</summary></entry></feed>